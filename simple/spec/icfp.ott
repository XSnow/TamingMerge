%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
defns
IDisjoint :: '' ::=

defn A *i B :: :: icfpDisjoint  :: ID_
{{ tex [[A]] *_i [[B]] }}
{{ com Algorithmic disjointness of \lambdai }}
by


A1 *i B
A2 *i B
--------------- :: andL
A1 & A2 *i B


A *i B1
A *i B2
--------------- :: andR
A *i B1 & B2


A2 *i B2
---------------------- :: ArrArr
A1 -> A2 *i B1 -> B2


A *ax B
------------- :: Ax
A *i B


defn A *ax B :: :: icfpDisjointAx :: IDax_
{{ tex [[A]] *_{ax} [[B]] }}
{{ com Algorithmic disjointness of \lambdai (Axioms) }}
by


not topLike B
---------------------- :: IntArr
int *ax A -> B


A *ax B
------------- :: symm
B *ax A


defns
WellformedType :: '' ::=

defn
G |= A :: :: WF :: 'Wf_'
{{ com Wellformed Types }}
by

------------- :: int
G |= int

------------- :: top
G |= Top


G |= A
G |= B
------------- :: arr
G |= A -> B


G |= A
G |= B
A <*> B
------------- :: and
G |= A & B


defns
ISubtyping :: '' ::=

defn
A <<i: B  :: :: isub :: IS_
{{ com icfp Subtyping (Restricted) }}
{{ tex [[A]] \lessdot [[B]] }}
by


---------------------- :: z
int <<i: int 

--------------- :: top
A <<i: Top 


B1 <<i: A1 
A2 <<i: B2 
------------------------ :: arr
A1 -> A2 <<i: B1 -> B2


A1 <<i: A3
ordinary A3
------------------------- :: andl1
A1 & A2 <<i: A3


A2 <<i: A3
ordinary A3
------------------------- :: andl2
A1 & A2 <<i: A3

A1 <<i: A2
A1 <<i: A3
----------------- :: andr
A1 <<i: A2 & A3




defns
ITyping :: '' ::=

defn
G |= ee dirflag A => e ::   :: ITyping :: 'ITyp_'
{{ com icfp2016 Typing rules }}
{{ tex [[G]][[|=]][[ee]][[dirflag]][[A]] }}
by


uniq G
------------------- :: top
G |= T => Top => T


uniq G
-------------------- :: lit
G |= i => int => i


uniq G
x : A in G
-------------------------- :: var
G |= x => A => x


G |= A
G , x : A |= ee <= B => e
---------------------------------------------- :: lam
G |= (\x . ee)  <= A->B  => (\x . e : A->B)


G |= ee1 => A->B => e1
G |= ee2 <= A => e2
--------------------------- :: app
G |= ee1 ee2 => B => e1 e2


G |= ee1 => A => e1
G |= ee2 => B => e2
A *i B
-------------------------------------- :: merge
G |= ee1 ,, ee2 => A & B => e1 ,, e2


G |= ee <= A => e
---------------------- :: anno
G |= ee:A => A => e


G |= ee <= A => e
A <<i: B
--------------------- :: sub
G |= ee => B => e : B



defns
IBTyping :: '' ::=

defn
G |= ee dirflag A ~> e ::   :: IBTyping :: 'IBTyp_'
{{ com The extended bidirectional typing of \lambdai }}
{{ tex [[G]][[|=]][[ee]][[dirflag]][[A]] \hlmath {\hookrightarrow [[e]]} }}
by


uniq G
------------------- :: top
G |= T => Top ~> T


uniq G
-------------------- :: lit
G |= i => int ~> i


uniq G
x : A in G
-------------------------- :: var
G |= x => A ~> x


G |= A
G , x : A |= ee <= B ~> e
------------------------------------------- :: lam
G |= \x . ee <= A->B ~> (\x . e : A->B)


G |= ee1 => A->B ~> e1
G |= ee2 <= A ~> e2
--------------------------- :: app
G |= ee1 ee2 => B ~> e1 e2


G |= ee1 => A ~> e1
G |= ee2 => B ~> e2
A <*> B
-------------------------------------- :: merge
G |= ee1 ,, ee2 => A & B ~> e1 ,, e2


G |= ee <= A ~> e
---------------------- :: anno
G |= ee:A => A ~> e:A


G |= ee => A ~> e
A <: B
------------------------ :: sub
G |= ee <= B ~> e


G |= A
G , x : A |= ee <= A ~> e
------------------------------------------- :: fix
G |= fix x . ee <= A ~> fix x : A . e
